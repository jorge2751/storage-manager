"""Command for cleaning up node_modules directories."""

import os
import shutil
import click
from rich.console import Console
from rich.live import Live
from pathspec import PathSpec
from pathspec.patterns import GitWildMatchPattern
from tqdm import tqdm

from storage_manager.utils.size_utils import get_directory_size, format_size
from storage_manager.utils.visualization import create_size_chart

console = Console()

def find_node_modules(search_path, spec):
    """Find node_modules directories in the given path."""
    dirs_to_scan = []
    # First count total directories for the progress bar
    total_dirs = sum(len(dirs) for _, dirs, _ in os.walk(search_path))
    
    with tqdm(total=total_dirs, desc="Scanning directories", unit="dirs") as pbar:
        for root, dirs, _ in os.walk(search_path):
            pbar.update(len(dirs))
            if spec.match_file(root):
                dirs.clear()
                continue
            if 'node_modules' in dirs:
                dirs_to_scan.append(os.path.join(root, 'node_modules'))
    return dirs_to_scan

@click.command()
@click.argument('search_path', type=click.Path(exists=True), default=os.path.expanduser('~'))
@click.option('--delete', is_flag=True, help='Delete found node_modules directories')
def clean_node_modules(search_path, delete):
    """Find and optionally delete node_modules directories."""
    console.print(f"\n[bold blue]Scanning for node_modules in: {search_path}[/bold blue]\n")

    # Define patterns to ignore
    spec = PathSpec.from_lines(
        GitWildMatchPattern,
        [
            '.git/*',
            '.venv/*',
            'venv/*',
            'env/*',
        ]
    )

    # First find all node_modules directories
    node_modules_dirs = find_node_modules(search_path, spec)

    if not node_modules_dirs:
        console.print("[yellow]No node_modules directories found.[/yellow]")
        return

    # Calculate sizes with live updating bar chart
    sizes_dict = {}
    with Live(create_size_chart(sizes_dict), refresh_per_second=4) as live:
        for path in node_modules_dirs:
            size = get_directory_size(path)
            sizes_dict[path] = size
            live.update(create_size_chart(sizes_dict))

    total_size = sum(sizes_dict.values())
    console.print(f"\n[bold green]Total space used by node_modules: {format_size(total_size)}[/bold green]")

    if delete and sizes_dict:
        if click.confirm('\nDo you want to delete these node_modules directories?'):
            for path in tqdm(sizes_dict.keys(), desc="Deleting directories", unit="dir"):
                try:
                    shutil.rmtree(path)
                except Exception as e:
                    console.print(f"[red]âœ—[/red] Failed to delete {path}: {str(e)}")
            
            console.print("\n[bold green]Cleanup completed![/bold green]")
